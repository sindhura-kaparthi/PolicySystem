plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'groovy'
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'wsdl4j:wsdl4j:1.6.3'
    implementation 'com.sun.xml.bind:jaxb-xjc:4.0.2'
    implementation 'com.sun.xml.bind:jaxb-core:4.0.2'
    implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.2'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.spockframework:spock-core:2.4-M1-groovy-4.0'
    testImplementation 'org.spockframework:spock-spring:2.4-M1-groovy-4.0'
    testImplementation 'org.apache.groovy:groovy-all:4.0.12'
    testImplementation 'org.springframework.ws:spring-ws-test:4.0.4'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register('generateJaxb') {
    group = "build"
    def jaxbTargetDir = file("src/main/java")
    doLast {
        ant {
                taskdef(name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask',
                        classpath: configurations.runtimeClasspath.asPath)

                mkdir(dir: jaxbTargetDir)

                xjc(destdir: jaxbTargetDir,
                        package: 'com.example.policysystem.policies',
                        schema: 'src/main/resources/policy-system.xsd',
                        extension: true
                )
        }
    }
}
compileJava.dependsOn(generateJaxb)

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: 'com/example/policysystem/PolicySystemApplication.class')
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.9
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}